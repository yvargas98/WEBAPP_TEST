[{"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\index.tsx":"1","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\reportWebVitals.ts":"2","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\App.tsx":"3","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\routes.tsx":"4","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Unauthorized.tsx":"5","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\NotFound404.tsx":"6","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Login.tsx":"7","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Util\\enviroment.ts":"8","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Components\\CustomRoutes\\AppLayoutRoute.tsx":"9","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Util\\validations.ts":"10","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Posts.tsx":"11","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Logout.tsx":"12","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Users.tsx":"13","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Categories.tsx":"14","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\API\\company.ts":"15"},{"size":544,"mtime":1608440143273,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":335,"mtime":1608504543793,"results":"19","hashOfConfig":"17"},{"size":971,"mtime":1608536672208,"results":"20","hashOfConfig":"17"},{"size":187,"mtime":1608444507622,"results":"21","hashOfConfig":"17"},{"size":21272,"mtime":1608444078856,"results":"22","hashOfConfig":"17"},{"size":2948,"mtime":1608536672193,"results":"23","hashOfConfig":"17"},{"size":117,"mtime":1608450208572,"results":"24","hashOfConfig":"17"},{"size":1683,"mtime":1608504543820,"results":"25","hashOfConfig":"17"},{"size":934,"mtime":1608536672099,"results":"26","hashOfConfig":"17"},{"size":7059,"mtime":1608536672193,"results":"27","hashOfConfig":"17"},{"size":214,"mtime":1608504543871,"results":"28","hashOfConfig":"17"},{"size":7617,"mtime":1608536672208,"results":"29","hashOfConfig":"17"},{"size":7299,"mtime":1608536672099,"results":"30","hashOfConfig":"17"},{"size":290,"mtime":1608504580693,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"9cy79n",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\index.tsx",[],["65","66"],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\reportWebVitals.ts",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\App.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\routes.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Unauthorized.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\NotFound404.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Login.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Util\\enviroment.ts",["67"],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Components\\CustomRoutes\\AppLayoutRoute.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Util\\validations.ts",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Posts.tsx",["68"],"import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Button, Container, Modal, Form, Col } from 'react-bootstrap';\r\nimport { RouteProps, useHistory } from 'react-router-dom';\r\nimport company from './../API/company';\r\nimport { isAdminOrEditor } from '../Util/validations';\r\n\r\ntype Post = {\r\n  post_id: string\r\n  title: string\r\n  description: string\r\n  date: string\r\n}\r\n\r\nconst Posts: any = (props: RouteProps) => {\r\n  const [postsData, setPostsData] = useState<Post[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const history = useHistory();\r\n\r\n  const [showModalCreate, setShowModalCreate] = useState<boolean>(false);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [showModalEdit, setShowModalEdit] = useState<boolean>(false);\r\n  const [selectedTitle, setSelectedTitle] = useState<string>(\"\");\r\n  const [selectedDescription, setSelectedDescription] = useState<string>(\"\");\r\n  const [selectedId, setSelectedId] = useState<number>();\r\n  const [showModalDelete, setShowModalDelete] = useState<boolean>(false);\r\n  \r\n  const [showModalError, setShowModalError] = useState<boolean>(false);\r\n\r\n  const createPost = () => {\r\n    company.post('/posts', {\r\n      title,\r\n      description,\r\n    }).then(()=> {\r\n      setShowModalCreate(false);\r\n      setLoading(true);\r\n      setTitle(\"\"); setDescription(\"\");\r\n    }).catch(() => {\r\n      setShowModalCreate(false);\r\n      setShowModalError(true);\r\n      setTitle(\"\"); setDescription(\"\");\r\n    })\r\n  }\r\n\r\n  const deletePost = () => {\r\n    company.delete(`/posts/${selectedId}`);\r\n    setShowModalDelete(false);\r\n    setLoading(true);\r\n  }\r\n\r\n  const editPost = () => {\r\n    company.put(`/posts/${selectedId}`,{\r\n      title: selectedTitle,\r\n      description: selectedDescription\r\n    }).then(()=> {\r\n      setShowModalEdit(false);\r\n      setLoading(true);\r\n      setTitle(\"\"); setDescription(\"\");\r\n    }).catch(()=> {\r\n      setShowModalEdit(false);\r\n      setShowModalError(true);\r\n      setTitle(\"\"); setDescription(\"\");\r\n    })\r\n  }\r\n\r\n  useEffect(()=> {\r\n    company('/posts').then(({data}) => {\r\n      setPostsData(data);\r\n      setLoading(false);\r\n    }).catch(()=>{\r\n      history.push('/403');\r\n    });\r\n  }, [loading]);\r\n\r\n  return !loading && (\r\n    <Container>\r\n      <Jumbotron style={{backgroundColor:'#5D5F59'}}>\r\n        {isAdminOrEditor() && \r\n          <Button variant=\"secondary\" onClick={()=> setShowModalCreate(true)}\r\n          style={{ float: 'right', margin: '20px', marginTop:'20px'}}>Create New Post</Button>\r\n        }\r\n        <h1 style={{color:'white'}}>Welcome to our Posts!</h1>\r\n        <p style={{color:'#C0C0C0'}}>You can find posts on varios topics. Enjoy it!</p>\r\n        <br/>\r\n        {\r\n        postsData.map( (post) => (\r\n          <Jumbotron key={post.post_id}>\r\n            <h6 style={{float:'right'}}>Creation Date: <span style={{color:'#5D5F59'}}>{(post.date).substr(0,post.date.indexOf('T'))}</span></h6>\r\n            <h1>{post.title}</h1>\r\n            <p>{post.description}</p>\r\n            {isAdminOrEditor() &&\r\n              <p>\r\n                <Button variant=\"primary\" \r\n                  onClick={() => {setShowModalEdit(true); setSelectedId(parseInt(post.post_id)); setSelectedTitle(post.title); setSelectedDescription(post.description)}}\r\n                >Edit</Button>{' '}\r\n                <Button variant=\"danger\" onClick={() => {setSelectedId(parseInt(post.post_id)); setShowModalDelete(true);}}>Delete</Button>\r\n              </p>\r\n            }\r\n          </Jumbotron>\r\n        ))\r\n      }\r\n      </Jumbotron>\r\n      <Modal size=\"lg\" show={showModalEdit} onHide={() => setShowModalEdit(false)} aria-labelledby=\"example-modal-sizes-title-lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">Edit Post</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Col>\r\n              <Form.Label>Post ID</Form.Label>\r\n              <Form.Control placeholder=\"Post ID\" required={true} value={selectedId} disabled={true}/><br/>\r\n              <Form.Label>Title</Form.Label>\r\n              <Form.Control placeholder=\"User Email\" required={true} value={selectedTitle} \r\n                onChange={e=>setSelectedTitle(e.target.value)}/><br/>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control as=\"textarea\" rows={4} placeholder=\"Description\" required={true} value={selectedDescription}\r\n                onChange={e=>setSelectedDescription(e.target.value)}/>\r\n            </Col>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalEdit(false)}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={()=> {editPost()}}>Update</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal size=\"lg\" show={showModalCreate} onHide={() => setShowModalCreate(false)} aria-labelledby=\"example-modal-sizes-title-lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">Create New Post</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Col>\r\n              <Form.Label>Title</Form.Label>\r\n              <Form.Control \r\n                placeholder=\"Title\" \r\n                required={true}\r\n                value={title}\r\n                onChange={e=>setTitle(e.target.value)}              \r\n              /><br/>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control \r\n                as=\"textarea\" rows={4}\r\n                placeholder=\"Description\" \r\n                required={true}\r\n                value={description}\r\n                onChange={e=>setDescription(e.target.value)}\r\n              />\r\n            </Col>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalCreate(false)}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={()=> {createPost()}}>Create Post</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal show={showModalDelete} onHide={()=> setShowModalDelete(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Delete Post</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you sure you want to delete this post?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalDelete(false)}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={()=> {deletePost()}}>Yes</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal show={showModalError} onHide={()=> setShowModalError(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>ERROR</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>An error was ocurred.</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalError(false)}>OK</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Posts;","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Logout.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Users.tsx",["69"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Col, Container, Form, Jumbotron, Modal, Table } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport company from './../API/company';\r\n\r\ntype User = {\r\n  user_id: number\r\n  email: string\r\n  password: string\r\n  role: string\r\n}\r\n\r\nconst Users: any = () => {\r\n  const [usersData, setUsersData] = useState<User[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const history = useHistory();\r\n\r\n  const [showModalCreate, setShowModalCreate] = useState<boolean>(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n  const [showModalEdit, setShowModalEdit] = useState<boolean>(false);\r\n  const [selectedEmail, setSelectedEmail] = useState<string>(\"\");\r\n  const [selectedRole, setSelectedRole] = useState<string>(\"\");\r\n  const [selectedId, setSelectedId] = useState<number>();\r\n  const [showModalDelete, setShowModalDelete] = useState<boolean>(false);\r\n  \r\n  const [showModalError, setShowModalError] = useState<boolean>(false);\r\n\r\n  const createUser = () => {\r\n    company.post('/users', {\r\n      email,\r\n      password,\r\n      role\r\n    }).then(()=> {\r\n      setShowModalCreate(false);\r\n      setLoading(true);\r\n      setEmail(\"\"); setPassword(\"\"); setRole(\"\");\r\n    }).catch(() => {\r\n      setShowModalCreate(false);\r\n      setShowModalError(true);\r\n      setEmail(\"\"); setPassword(\"\"); setRole(\"\");\r\n    })\r\n  }\r\n\r\n  const deleteUser = () => {\r\n    company.delete(`/users/${selectedId}`);\r\n    setShowModalDelete(false);\r\n    setLoading(true);\r\n  }\r\n\r\n  const editUser = () => {\r\n    company.put(`/users/${selectedId}`,{\r\n      email: selectedEmail,\r\n      role: selectedRole\r\n    }).then(()=> {\r\n      setShowModalEdit(false);\r\n      setLoading(true);\r\n      setSelectedEmail(\"\"); setSelectedRole(\"\");\r\n    }).catch(()=> {\r\n      setShowModalEdit(false);\r\n      setShowModalError(true);\r\n      setSelectedEmail(\"\"); setSelectedRole(\"\");\r\n    })\r\n  }\r\n\r\n  useEffect(()=> {\r\n    company('/users').then(({data}) => {\r\n      setUsersData(data);\r\n      setLoading(false);\r\n    }).catch(()=>{\r\n      history.push('/403');\r\n    });\r\n  },[loading]);\r\n\r\n  return !loading && (\r\n    <Container style={{ marginTop: '30px' }}>\r\n      <Jumbotron>\r\n        <Button \r\n          variant=\"secondary\" \r\n          style={{ float: 'right', margin: '20px' }}\r\n          onClick={()=> setShowModalCreate(true)}>Add a New User</Button>\r\n        <h1>Manage User</h1>\r\n        <Table responsive striped bordered hover style={{backgroundColor:'white'}}>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Email</th>\r\n              <th>Password</th>\r\n              <th>Role</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {usersData.map(user => (\r\n              <tr key={user.user_id}>\r\n                <td>{user.user_id}</td>\r\n                <td>{user.email}</td>\r\n                <td className=\"wrap2\">{user.password}</td>\r\n                <td>{user.role}</td>\r\n                <td>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setShowModalEdit(true);\r\n                      setSelectedId(user.user_id);\r\n                      setSelectedEmail(user.email);\r\n                      setSelectedRole(user.role);\r\n                    }}\r\n                  >Edit</Button>{' '}\r\n                  <Button \r\n                    variant=\"danger\" \r\n                    onClick={() => {setSelectedId(user.user_id); setShowModalDelete(true);}}\r\n                  >Delete</Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </Jumbotron>\r\n      <Modal size=\"lg\" show={showModalEdit} onHide={() => setShowModalEdit(false)} aria-labelledby=\"example-modal-sizes-title-lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">Edit User</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Col>\r\n              <Form.Label>User ID</Form.Label>\r\n              <Form.Control placeholder=\"User ID\" required={true} value={selectedId} disabled={true}/>\r\n              <Form.Label>User Email</Form.Label>\r\n              <Form.Control placeholder=\"User Email\" required={true} value={selectedEmail} \r\n                onChange={e=>setSelectedEmail(e.target.value)}/>\r\n              <Form.Label>User Role</Form.Label>\r\n              <Form.Control as=\"select\" required={true} value={selectedRole}\r\n                onChange={e=>setSelectedRole(e.target.value)}/>\r\n            </Col>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalEdit(false)}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={()=> {editUser()}}>Update</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal size=\"lg\" show={showModalCreate} onHide={() => setShowModalCreate(false)} aria-labelledby=\"example-modal-sizes-title-lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">Create New User</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Col>\r\n              <Form.Label>User Email</Form.Label>\r\n              <Form.Control \r\n                placeholder=\"User Email\" \r\n                required={true}\r\n                value={email}\r\n                onChange={e=>setEmail(e.target.value)}              \r\n              /><br/>\r\n              <Form.Label>User Password</Form.Label>\r\n              <Form.Control \r\n                placeholder=\"User Password\" \r\n                required={true}\r\n                value={password}\r\n                onChange={e=>setPassword(e.target.value)}\r\n              /><br/>\r\n              <Form.Label>User Role</Form.Label>\r\n              <Form.Control as=\"select\"\r\n                required={true}\r\n                value={role}\r\n                onChange={e=>setRole(e.target.value)}\r\n              >\r\n                <option>Admin</option>\r\n                <option>Editor</option>\r\n                <option>Viewer</option>\r\n              </Form.Control>\r\n            </Col>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalCreate(false)}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={()=> {createUser()}}>Create User</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal show={showModalDelete} onHide={()=> setShowModalDelete(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Delete User</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you sure you want to delete this user?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalDelete(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={()=> {deleteUser()}}>\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal show={showModalError} onHide={()=> setShowModalError(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>ERROR</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>An error was ocurred.</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=> setShowModalError(false)}>\r\n            OK\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Users;","C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\Views\\Categories.tsx",[],"C:\\Users\\Gerson\\Documents\\Test\\webapp_test\\src\\API\\company.ts",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":1,"nodeType":"76","endLine":4,"endColumn":3},{"ruleId":"77","severity":1,"message":"78","line":73,"column":6,"nodeType":"79","endLine":73,"endColumn":15,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"78","line":74,"column":5,"nodeType":"79","endLine":74,"endColumn":14,"suggestions":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["84"],["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"86","fix":"88"},"Update the dependencies array to be: [history, loading]",{"range":"89","text":"90"},{"range":"91","text":"90"},[2261,2270],"[history, loading]",[2233,2242]]